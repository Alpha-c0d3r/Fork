// <auto-generated />
using System;
using Fork.Logic.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fork.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20210123205135_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Fork.Logic.Model.Automation.RestartTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("RestartTime");
                });

            modelBuilder.Entity("Fork.Logic.Model.Automation.StartTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("StartTime");
                });

            modelBuilder.Entity("Fork.Logic.Model.Automation.StopTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("StopTime");
                });

            modelBuilder.Entity("Fork.Logic.Model.JavaSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JavaPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRam")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartupParameters")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JavaSettings");
                });

            modelBuilder.Entity("Fork.Logic.Model.ProxyModels.Network", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Initialized")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JavaSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProxyType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServerIconId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartWithFork")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SyncServers")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UID");

                    b.HasIndex("JavaSettingsId");

                    b.HasIndex("VersionId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Fork.Logic.Model.Server", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoSetSha1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AutoStart1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AutoStart2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AutoStop1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AutoStop2Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Initialized")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JavaSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResourcePackHashAge")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Restart1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Restart2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Restart3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Restart4Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServerIconId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartWithFork")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UID");

                    b.HasIndex("AutoStart1Id");

                    b.HasIndex("AutoStart2Id");

                    b.HasIndex("AutoStop1Id");

                    b.HasIndex("AutoStop2Id");

                    b.HasIndex("JavaSettingsId");

                    b.HasIndex("Restart1Id");

                    b.HasIndex("Restart2Id");

                    b.HasIndex("Restart3Id");

                    b.HasIndex("Restart4Id");

                    b.HasIndex("VersionId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Fork.Logic.Model.ServerVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Build")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JarLink")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServerVersion");
                });

            modelBuilder.Entity("Fork.Logic.Model.SimpleTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SimpleTime");
                });

            modelBuilder.Entity("Fork.Logic.Model.Automation.RestartTime", b =>
                {
                    b.HasOne("Fork.Logic.Model.SimpleTime", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Fork.Logic.Model.Automation.StartTime", b =>
                {
                    b.HasOne("Fork.Logic.Model.SimpleTime", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Fork.Logic.Model.Automation.StopTime", b =>
                {
                    b.HasOne("Fork.Logic.Model.SimpleTime", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Fork.Logic.Model.ProxyModels.Network", b =>
                {
                    b.HasOne("Fork.Logic.Model.JavaSettings", "JavaSettings")
                        .WithMany()
                        .HasForeignKey("JavaSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.ServerVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JavaSettings");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Fork.Logic.Model.Server", b =>
                {
                    b.HasOne("Fork.Logic.Model.Automation.StartTime", "AutoStart1")
                        .WithMany()
                        .HasForeignKey("AutoStart1Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.StartTime", "AutoStart2")
                        .WithMany()
                        .HasForeignKey("AutoStart2Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.StopTime", "AutoStop1")
                        .WithMany()
                        .HasForeignKey("AutoStop1Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.StopTime", "AutoStop2")
                        .WithMany()
                        .HasForeignKey("AutoStop2Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.JavaSettings", "JavaSettings")
                        .WithMany()
                        .HasForeignKey("JavaSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.RestartTime", "Restart1")
                        .WithMany()
                        .HasForeignKey("Restart1Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.RestartTime", "Restart2")
                        .WithMany()
                        .HasForeignKey("Restart2Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.RestartTime", "Restart3")
                        .WithMany()
                        .HasForeignKey("Restart3Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.Automation.RestartTime", "Restart4")
                        .WithMany()
                        .HasForeignKey("Restart4Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fork.Logic.Model.ServerVersion", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AutoStart1");

                    b.Navigation("AutoStart2");

                    b.Navigation("AutoStop1");

                    b.Navigation("AutoStop2");

                    b.Navigation("JavaSettings");

                    b.Navigation("Restart1");

                    b.Navigation("Restart2");

                    b.Navigation("Restart3");

                    b.Navigation("Restart4");

                    b.Navigation("Version");
                });
#pragma warning restore 612, 618
        }
    }
}
