<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
                    xmlns:model="clr-namespace:fork.Logic.Model">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ButtonStyles.xaml"></ResourceDictionary>
        <ResourceDictionary Source="ScrollBarStyle.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource foregroundDefault}" />
    </Style>

    <Style TargetType="Label">
        <Setter Property="FontFamily" Value="{StaticResource Montserrat-SemiBold}"/>
        <Setter Property="Foreground" Value="{DynamicResource foregroundDefault}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource foregroundDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource textDefault}" />
        <Setter Property="FontFamily" Value="{DynamicResource Montserrat-Medium}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource foregroundDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource inputDefault}" />
        <Setter Property="Foreground" Value="{DynamicResource foregroundDefault}" />
        <Setter Property="CaretBrush" Value="{DynamicResource caretColor}"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource errorBorder}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SelectOnly" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg" BorderThickness="0">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="{DynamicResource backgroundDefault}" />
    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="{DynamicResource backgroundDefault}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource backgroundLight}"/>
    </Style>

    <Style x:Key="StartStopButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STOPPED}">
                <Setter Property="IsEnabled" Value="True"></Setter>
                <Setter Property="Content" Value="Start Server"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STARTING}">
                <Setter Property="IsEnabled" Value="False"></Setter>
                <Setter Property="Content" Value="Starting..."></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.RUNNING}">
                <Setter Property="IsEnabled" Value="True"></Setter>
                <Setter Property="Content" Value="Stop Server"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="lvc:LineSeries">
        <Setter Property="PointGeometrySize" Value="0"></Setter>
        <Setter Property="LineSmoothness" Value="0.5"></Setter>
    </Style>
    <Style x:Key="yAxisCPU" TargetType="lvc:Axis">
        <Setter Property="MinValue" Value="0"/>
        <Setter Property="MaxValue" Value="100"/>
        <Setter Property="MinRange" Value="100"/>
        <Setter Property="MaxRange" Value="100"/>
    </Style>
    <Style x:Key="xAxisCPU" TargetType="lvc:Axis">
        <Setter Property="ShowLabels" Value="False"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="MinValue" Value="2"/>
        <Setter Property="MaxValue" Value="100"/>
        <Setter Property="MinRange" Value="100"/>
        <Setter Property="MaxRange" Value="100"/>
    </Style>
    
    
    <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
    
    <Style x:Key="CustomProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource buttonBgrGreen}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="3" RadiusY="3"/>
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="3" RadiusY="3">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>